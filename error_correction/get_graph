import networkx as nx
import numpy as np
import json
from lc_equivalence import check_LCequiv
import cirq
from cirq.ops import CZ, H



def graph(iter_dict, key_list, eps, px, pz, photon_discount):
    """ Function for sanity check if the circuit including the LC-ops actually produces the
    correct graph state"""
    circuit_2 = cirq.Circuit()
    q = cirq.LineQubit.range(int(key_list[0]) + 1)
    circuit_2.append([H(qubit) for qubit in q])
    i = 0
    for edge in iter_dict[key_list[0]]["graph"][1]:
        i += 1
        circuit_2.append([CZ(q[edge[0]], q[edge[1]])])
    pol = cirq.asymmetric_depolarize(
        p_x=px * eps,
        p_y=(1- px- pz) * eps,
        p_z=pz * eps,
    )
    circuit_2.append([pol.on(q[0])])
    pol = cirq.asymmetric_depolarize(
        p_x=px * eps * photon_discount,
        p_y=(1 - px - pz) * eps * photon_discount,
        p_z=pz * eps * photon_discount,
    )
    circuit_2.append([pol.on(qs) for qs in q[1:]])
    dsim = cirq.DensityMatrixSimulator()
    den_matrix = dsim.simulate(circuit_2).final_density_matrix
    return den_matrix



def get_it(iter_dict, key_list, eps, px, pz, photon_discount):
    return graph(iter_dict, key_list, eps, px, pz, photon_discount)


