import cirq
from cirq.ops import CZ, H, S, Z, I, X, Y, CNOT
import numpy as np

def measure_ops_qubits():
    identity = np.array([[1, 0],
                         [0, 1]], dtype=np.complex128)

    X_spin = np.array([[0, 1],
                         [1, 0]], dtype=np.complex128)

    X_photon = np.array([[0, 1],
                         [1, 0]], dtype=np.complex128)

    Z_spin = np.array([[1, 0],
                         [0, -1]], dtype=np.complex128)

    Z_photon = np.array([[1, 0],
                         [0, -1]], dtype=np.complex128)


    stab_1 = np.kron(np.kron(np.kron(identity, Z_photon), Z_photon), X_photon)
    stab_2 = np.kron(np.kron(np.kron(Z_spin, identity), X_photon), Z_photon)
    stab_3 = np.kron(np.kron(np.kron(X_spin, Z_photon), Z_photon), identity)

    return stab_1, stab_2, stab_3

if __name__ == "__main__":
    S = measure_ops_qubits()
    circuit = cirq.Circuit()
    q = cirq.LineQubit.range(5)
    circuit.append([H(q[0]), H(q[1]), H(q[2]), H(q[3])])
    circuit.append([CZ(q[0], q[1]), CZ(q[0], q[2]), CZ(q[2], q[3]), CZ(q[3], q[1])])# QUBITS HAVE WEIRD ORDER!
    circuit.append([cirq.measure(q[4])])
    ideal0 = cirq.Simulator().simulate(circuit).final_state_vector

    circuit = cirq.Circuit()
    q = cirq.LineQubit.range(4)
    circuit.append([H(q[0]), H(q[1]), H(q[2]), H(q[3])])
    circuit.append([CZ(q[0], q[1]), CZ(q[0], q[2])])
    circuit.append([cirq.rx(np.pi / 2)(q[0]), cirq.rz(-np.pi / 2)(q[1]), cirq.rz(-np.pi / 2)(q[2])])
    circuit.append([CZ(q[0], q[3])])
    circuit.append([cirq.rx(np.pi / 2)(q[0]), cirq.rz(-np.pi / 2)(q[1]), cirq.rz(-np.pi / 2)(q[2]), cirq.rz(-np.pi / 2)(q[3])])
    circuit.append([cirq.rx(np.pi / 2)(q[1]), cirq.rz(-np.pi / 2)(q[0]), cirq.rz(-np.pi / 2)(q[3])])
    circuit.append([CNOT(q[0], q[4]), H(q[2]), CNOT(q[2], q[4]), H(q[2]), CNOT(q[3], q[4])])
    circuit.append([cirq.measure(q[4])])
    print(circuit)
    simulator = cirq.Simulator()
    result = simulator.run(circuit, repetitions=10)
    print("Results:")
    print(result)
    
