from gates_and_basis_change import switch, switch_density, QuditLateSPhoton, QuditEarlySPhoton, X_full_matrix, \
    X_half_matrix, x_rot_full_faulty_density
import numpy as np

def gates_state(numb_photons, beta_par, beta_dia, delta0, density=True):
    qudit = np.array([1, 0, 0, 0], dtype=np.complex128)
    photon = np.array([1, 0, 0, 0], dtype=np.complex128)
    identity = np.array([[1, 0, 0, 0],
                         [0, 1, 0, 0],
                         [0, 0, 1, 0],
                         [0, 0, 0, 1]], dtype=np.complex128)
    exc_matrix = np.array([[1 - delta0, 0, 0, delta0],
                           [0, 0, 1, 0],
                           [0, 1, 0, 0],
                           [-delta0, 0, 0, 1 - delta0],
                           ])

    early_gate = QuditEarlySPhoton(beta_par, beta_dia).unitary()
    late_gate = QuditLateSPhoton(beta_par, beta_dia).unitary()
    ex = np.kron(exc_matrix, identity)
    X_half_perfect = np.kron(X_half_matrix, identity)
    X_full_perfect = np.kron(X_full_matrix, identity)
    state = np.kron(qudit, photon)

    for i in range(numb_photons - 1):
        state = np.kron(state, photon)
        ex = np.kron(ex, identity)
        early_gate = np.kron(early_gate, identity)
        late_gate = np.kron(late_gate, identity)
        X_half_perfect = np.kron(X_half_perfect, identity)
        X_full_perfect = np.kron(X_full_perfect, identity)

    basis = []

    for neigh in range(numb_photons, numb_photons + 1):
        v, state1 = switch(state, neigh)
        basis.append(v)

    density_matrix = np.outer(state, state)

    # Initial X pi half rot.
    density_matrix = (x_rot_full_faulty_density(density_matrix, numb_photons + 1, 3.5, photon="early"))
    state = np.matmul(X_half_perfect, state)

    if density == True:
        return ex, early_gate, late_gate, density_matrix, basis
    else:
        return ex, early_gate, late_gate, X_full_perfect, X_half_perfect, state


def automated_density_gen(numb_photons, LC_X_spin):
    """ Works for LC_X_spin <= numb_photons - 1 """
    ex, early_gate, late_gate, density_matrix, basis = gates_state(numb_photons, 0.992, 0.072, 10 ** (-2), density=True)
    density_matrix = photo_gen(density_matrix, numb_photons, ex, early_gate, late_gate)

    for i in range(LC_X_spin):
        density_matrix = basis_change(density_matrix, basis[0], numb_photons, ex, early_gate, late_gate)
        density_matrix = photo_gen_merge(density_matrix, numb_photons, ex, early_gate, late_gate)

    if numb_photons - 1 - LC_X_spin != 0:
        for j in range(numb_photons - 1 - LC_X_spin):
            density_matrix = basis_change(density_matrix, basis[0], numb_photons, ex, early_gate, late_gate)
            density_matrix = photo_gen(density_matrix, numb_photons, ex, early_gate, late_gate)
    else:
        print("Filled up!")

    return density_matrix


def automated_ideal_gen(numb_photons, LC_X_spin):
    """ Works for LC_X_spin <= numb_photons - 1 """
    ex, early_gate, late_gate, X_full_perfect, X_half_perfect, state = gates_state(numb_photons, 1, 0, 0, density=False)
    state = photo_gen_ideal(state, ex, early_gate, late_gate, X_full_perfect)

    for i in range(LC_X_spin):
	print("Working on photon number {} at the moment".format(str(2 + i)))
        v, state = switch(state, numb_photons)
        state = photo_gen_ideal_merge(state, ex, early_gate, late_gate, X_full_perfect, X_half_perfect)

    if numb_photons - 1 - LC_X_spin != 0:
        for j in range(numb_photons - 1 - LC_X_spin):
	    print("Working on photon number {} at the moment".format(str(1 + LC_X_spin + j)))
            v, state = switch(state, numb_photons)
            state = photo_gen_ideal(state, ex, early_gate, late_gate, X_full_perfect)
    else:
        print("Filled up!")
    return state



if __name__ == "__main__":
   numb_photons = 4
   density_matrix = automated_density_gen(numb_photons, 2)
   ideal = automated_ideal_gen(numb_photons, 2)
   fidelity = np.matmul(np.matmul(np.conjugate(ideal).transpose(), density_matrix), ideal)
   print("The graph state was produced with {} fidelity".format(str(fidelity)))
